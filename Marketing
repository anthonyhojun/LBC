---
title: "LBC Marketing"
output:
  html_document: default
  pdf_document: default
  word_document: default
---
<!--  SET UP -->

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r import libraries, include = FALSE}
library(ggplot2)
library(dplyr)
library(ggthemes)
library(scales)
library(readr)
library(stringr)
library(data.table)
library(Hmisc)
library(tidyr)

```


<!--  LOAD FILES -->


```{r load files, include = FALSE}
# Create directory
sysdate <- format(Sys.Date(), "%Y%m%d")
querydirectory <- file.path("C:/Users/antpc/Desktop/Vegas/Analytics/Query", sysdate)

# Load files
all <- list.files(querydirectory, full.names = TRUE)
all <- rbindlist(lapply(all, read_csv))

```


<!--  FILTERS CHANGES: AB GROUPS, RETENTION DAYS, NOTES --> 


```{r filters information}
#New users start from 6256 for 20161026
vegas <- all[APP == "VEGAS" & CREATE_ACCOUNT >= "2016-11-11" & UID > 6240
             & COUNTRY != "KR"][order(UID, CREATE_DATE)] ##### Filter for marketing dates #####

```


<!--  ABtest setting -->

```{r, sep users by date cohort for AB test}
## By date cohort
invisible(vegas[CREATE_ACCOUNT >= "2016-11-11" & CREATE_ACCOUNT < "2016-11-18", GROUPBY := "11/11 ~ 11/17"])
invisible(vegas[CREATE_ACCOUNT >= "2016-11-18", GROUPBY := "11/18 ~ 11/24"])
```


<!--  Create functions -->


```{r Creating percentage functions }
# Percentages
percentage.func <- function(dat, col){
  get(dat)[, Percent := paste0(100 * round(get(col) / sum(get(col)), 2), "%"), by = GROUPBY][]
}

# format: percentage.func("country.unique", "N")
```

```{r Creating graph functions }
## Graphs for binary by GROUPBY
graph.binary <- function(dat, xaxis, yaxis){
  ggplot(get(dat), aes(get(xaxis), get(yaxis), label = Percent, fill = get(xaxis))) +
  geom_bar(stat = "identity", color = "black") +
  theme_few() +
  xlab("") +
  ylab("") +
  geom_text(size = 3, vjust = 1.6, fontface = "bold") +
  scale_fill_few() +
  theme(legend.position="none") +
  facet_wrap(~GROUPBY, scales = "free")
}

## Graphs for slots
graph.slotcomparisons <- function(dat, xaxis, yaxis){
  ggplot(get(dat), aes(get(xaxis), get(yaxis), label = Percent, fill = ID)) +
  geom_bar(stat = "identity", color = "black") +
  theme_few() +
  xlab("") +
  ylab("") +
  geom_text(size = 3, vjust = 1.6, fontface = "bold") +
  scale_y_continuous(labels = comma) +
  scale_fill_few() +
  theme(legend.position="none") +
  facet_wrap(~GROUPBY, scales = "free")
}

## Graphs for distributions
graph.distribution <- function(dat, xaxis, xlabel){
ggplot(get(dat), aes(get(xaxis))) +
  geom_bar(fill = "light blue", color = "black") +
  xlab(xlabel) +
  ylab("Count") +
  theme_gdocs() +
  scale_x_continuous(breaks = seq(0, 10, 1)) +
  facet_wrap(~GROUPBY, scales = "free")
}

## Graphs for distributions with yaxis
graph.distribution.N <- function(dat, xaxis, yaxis, xlabel, plabel){
ggplot(get(dat), aes(get(xaxis), get(yaxis), label = get(plabel))) +
  geom_bar(stat = 'identity', fill = "light blue", color = "black") +
  xlab(xlabel) +
  ylab("Count") +
  theme_gdocs() +
  scale_x_continuous(breaks = seq(0, 10, 1)) +
  facet_wrap(~GROUPBY, scales = "free") +
  geom_text(size = 3, vjust = 1.6)
}

## Bar plot for distributions
graph.boxplot <- function(dat, yaxis){
  ggplot(get(dat), aes(GROUPBY, get(yaxis), group = GROUPBY, fill = GROUPBY)) +
  geom_boxplot(outlier.shape = NA ) +
  ylab("Count") +
  xlab("Groups") +
  theme_gdocs() +
  scale_fill_few() +
  theme(legend.position="none")
}



```


<!--  Start -->

> ### **General**

***


##### **Groups**
##### 유저 그룹 
###### `A = 2016-11-11 ~ 2016-11-17`
###### `B = 2016-11-18 ~ 2016-11-24`

<!-- ##### **Groups** -->
<!-- ##### 유저 그룹  -->
<!-- ###### `A = Even` -->
<!-- ###### `B = Odd`  -->


##### **User Count**  
##### 유저 수 
```{r usercount for period}
vegas[, lapply(.SD, uniqueN), by = GROUPBY, .SDcols = "UID"][order(GROUPBY)]
```

##### **Rolling Retention**  
##### 1일, 2일, 3일, 등 평균 retention
```{r Test Rolling retention, warning = FALSE, message = FALSE}
rollingretention <- vegas[CREATE_ACCOUNT >= "2016-10-26" & UID > 6300, .(UID, GROUPBY, CREATE_DATE, CREATE_ACCOUNT)][order(UID)]
invisible(rollingretention[, CREATE_ACCOUNT := substr(CREATE_ACCOUNT, 0, 10)])
invisible(rollingretention[, CREATE_DATE := substr(CREATE_DATE, 0, 10)])


rollingretention.byday <- unique(rollingretention, by = c("UID", "CREATE_DATE"))
invisible(rollingretention.byday[, DIFFERENCE := as.integer(difftime(CREATE_DATE, CREATE_ACCOUNT, unit = "days"))])
rollingretention.cast <- dcast(rollingretention.byday, UID + CREATE_ACCOUNT + GROUPBY ~ DIFFERENCE, function(x) 1, fill = 0)

retention <- rollingretention.cast[, lapply(.SD, function(x) 100 * (round(sum(x) / length(x), 2))), by = GROUPBY, .SDcols = c(5:11)]

retention.long <- melt(retention, "GROUPBY")
invisible(retention.long[, PERCENT := paste0(value, "%")])

ggplot(retention.long) + 
  geom_bar(aes(variable, value, fill = GROUPBY), position = position_dodge(width=1), stat = "identity") + 
  geom_text(aes(variable ,value,label = PERCENT, group = GROUPBY), position = position_dodge(width = 1), size = 3, vjust = 1.5,   fontface = "bold") +
  theme_few() +
  xlab("days") +
  ylab("retention") +
  scale_fill_gdocs() +
  theme(legend.position = "none")

```

##### **Country distribution**  
##### 국가 분포
```{r country distribution, echo = FALSE}
country.unique <- unique(vegas, by = c("GROUPBY", "UID", "COUNTRY"))
country.summary <- country.unique[, .N, by = c("GROUPBY", "COUNTRY")][order(GROUPBY, -N)]
country.summary <- country.summary[, .SD[1:3], by = GROUPBY]
invisible(percentage.func("country.summary", "N"))

ggplot(country.summary, aes(reorder(COUNTRY,-N), N, label = Percent, fill = COUNTRY)) +
  geom_bar(stat = "identity", color = "black") +
  theme_few() +
  xlab("") +
  ylab("") +
  geom_text(size = 3, vjust = 1.60, fontface = "bold") +
  scale_fill_few() +
  facet_wrap(~GROUPBY, scales = "free")

```

##### **Platform distribution**  
##### 플랫폼 분포
```{r Platform distribution}
platform.unique <- unique(vegas, by = c("GROUPBY", "UID", "OS"))
invisible(platform.unique[is.na(OS), OS := "iOS"])
platform.summary <- platform.unique[, .N, by = c("GROUPBY", "OS")][order(GROUPBY, -N)]
invisible(percentage.func("platform.summary", "N"))

graph.binary("platform.summary", "OS", "N")
```

##### **OS distribution**  
##### OS 분포
```{r OS distribution}
platform.unique <- unique(vegas, by = c("GROUPBY", "UID", "OS"))
invisible(platform.unique[is.na(OS), OS := "iOS"])
platform.summary <- platform.unique[, .N, by = c("GROUPBY", "OS")][order(GROUPBY, -N)]
invisible(percentage.func("platform.summary", "N"))

graph.binary("platform.summary", "OS", "N")
```

##### **Gender distribution**  
##### 성 분포
```{r Gender distribution}
gender.unique <- unique(vegas, by = c("GROUPBY", "UID", "GENDER"))
gender.summary <- gender.unique[, .N, by = c("GROUPBY", "GENDER")][order(GROUPBY, -N)]
gender.summary <- gender.summary[GENDER != "unknown"]
invisible(percentage.func("gender.summary", "N"))

graph.binary("gender.summary", "GENDER", "N")
```

##### **Country x gender**  
##### 국가 x 성
```{r GENDER x COUNTRY}
Gender.country <- unique(vegas, by = c("UID", "COUNTRY", "GENDER"))
invisible(Gender.country <- Gender.country[GENDER != "unknown", .(COUNTRY, GENDER)])
Gender.country <- Gender.country[, .N, by = .(COUNTRY, GENDER)]
Gender.country <- Gender.country[N > 5]

invisible(Gender.country[, PERCENT := paste0(100 * round(N/sum(N),2), "%"), by = COUNTRY])

ggplot(Gender.country, aes(GENDER, N, fill = GENDER, label = PERCENT)) +
  geom_bar(stat = "identity", color = "black") +
  facet_wrap(~COUNTRY, scales = "free") +
  scale_fill_few() +
  theme_few() +
  xlab("") +
  ylab("") +
  geom_text(size = 3, fontface = "bold", vjust = 1.3) +
  theme(legend.position = "none")
```

##### **Gender x slot**  
##### 성 x 인기 슬롯 
```{r Gender x slot}
slot.gender <- vegas[SUBCONTENT == "SPIN", .(UID, SUBCONTENT, GENDER, ID)]
slot.gender <- slot.gender[GENDER != "unknown"]
slot.gender <- slot.gender[, .N, by = .(GENDER, ID)]

invisible(slot.gender[, PERCENT := paste0(100 * round(N/sum(N),2), "%"), by = GENDER])

ggplot(slot.gender, aes(ID, N, fill = ID, label = PERCENT)) +
  geom_bar(stat = "identity", color = "black") +
  facet_wrap(~GENDER, scales = "free") +
  scale_fill_few() +
  xlab("") +
  ylab("") +
  theme_few() +
  geom_text(size = 3, fontface = "bold", vjust = 1.3) +
  theme(legend.position = "none")
```

##### **Country x os**  
##### 국가 x os
```{r OS x COUNTRY}
OS.country <- unique(vegas, by = c("UID", "COUNTRY", "OS"))
OS.country <- OS.country[, .(COUNTRY, OS)]
OS.country <- OS.country[, .N, by = .(COUNTRY, OS)]
OS.country <- OS.country[N > 10]
invisible(OS.country[, PERCENT := paste0(100 * round(N/sum(N),2), "%"), by = COUNTRY])

ggplot(OS.country, aes(OS, N, fill = OS, label = PERCENT)) +
  geom_bar(stat = "identity", color = "black") +
  facet_wrap(~COUNTRY, scales = "free") +
  scale_fill_few() +
  xlab("") +
  ylab("") +
  theme_few() +
  geom_text(size = 3, fontface = "bold", vjust = 1.3) +
  theme(legend.position = "none")
```

##### **Country x slot**  
##### 국가 x 인기 슬롯 
```{r Country x slot, fig.width= 10, fig.height = 8}
slot.country <- vegas[SUBCONTENT == "SPIN", .(UID, SUBCONTENT, COUNTRY, ID)]
slot.country <- slot.country[, .N, by = .(COUNTRY, ID)]
slot.country <- slot.country[N > 500]

invisible(slot.country[, PERCENT := paste0(100 * round(N/sum(N),2), "%"), by = COUNTRY])

ggplot(slot.country, aes(ID, N, fill = ID, label = PERCENT)) +
  geom_bar(stat = "identity", color = "black") +
  facet_wrap(~COUNTRY, scales = "free") +
  scale_fill_few() +
  xlab("") +
  ylab("") +
  theme_few() +
  geom_text(size = 2.5, fontface = "bold", vjust = 1.3) +
  theme(legend.position = "none")
```
