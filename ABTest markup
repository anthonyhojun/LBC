---
title: "LBC Slots: `1` Day"
output:
  html_document: default
  pdf_document: default
  word_document: default
---
<!--  SET UP -->

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r import libraries, include = FALSE}
library(ggplot2)
library(dplyr)
library(ggthemes)
library(scales)
library(readr)
library(stringr)
library(data.table)
library(Hmisc)
library(tidyr)
library(ggExtra)

```


<!--  LOAD FILES -->


```{r load files, include = FALSE}
# Create directory
sysdate <- format(Sys.Date(), "%Y%m%d")
querydirectory <- file.path("C:/Users/antpc/Desktop/Vegas/Analytics/Query", sysdate)

# Load files
all <- list.files(querydirectory, full.names = TRUE)
all <- rbindlist(lapply(all, read_csv))

```


<!--  FILTERS CHANGES: AB GROUPS, RETENTION DAYS, NOTES --> 


```{r filters information}
#New users start from 6256 for 20161026
rf.clean <- all[APP == "VEGAS" & CREATE_ACCOUNT >= "2016-11-24 11:13" & UID > 6300
             & COUNTRY != "KR" & TYPE == "GOLD"][order(UID, CREATE_DATE)] ##### Filter for marketing dates #####
invisible(rf.clean[, c("MAX_LEVEL", "LOGIN_DATE", "EMAIL", "AGE_RANGE", "FRIENDS_COUNT", "APP") := NULL])
```

```{r}
# Create A/B
invisible(rf.clean[, GROUPBY := ifelse(UID %% 2 == 0, "A", "B")])

# Create date and provider filters
invisible(rf.clean[, CREATE_ACCOUNT := substr(CREATE_ACCOUNT, 1, 10)])
invisible(rf.clean[, CREATE_DATE := substr(CREATE_DATE, 1, 10)])

invisible(rf.clean[, DIFF := as.integer(difftime(CREATE_DATE, CREATE_ACCOUNT, units = "days"))])

```


```{r}
vegas <- rf.clean[DIFF == 0] # [DIFF == 0] SHOULD BE -1 day of what i want to check
#retention.check = "`1`"
```


<!--  Create functions -->


```{r Creating percentage functions }
# Percentages
percentage.func <- function(dat, col){
  get(dat)[, Percent := paste0(100 * round(get(col) / sum(get(col)), 2), "%"), by = GROUPBY][]
}

# format: percentage.func("country.unique", "N")
```

```{r Creating graph functions }
## Graphs for binary by GROUPBY
graph.binary <- function(dat, xaxis, yaxis){
  ggplot(get(dat), aes(get(xaxis), get(yaxis), label = Percent, fill = get(xaxis))) +
  geom_bar(stat = "identity", color = "black") +
  theme_few() +
  xlab("") +
  ylab("") +
  geom_text(size = 3.5, vjust = -.6, fontface = "bold") +
  scale_fill_few() +
  theme(legend.position="none")
  }

## Graphs for slots
graph.slotcomparisons <- function(dat, xaxis, yaxis){
  ggplot(get(dat), aes(get(xaxis), get(yaxis), label = Percent, fill = ID)) +
  geom_bar(stat = "identity", color = "black") +
  theme_few() +
  xlab("") +
  ylab("") +
  geom_text(size = 3.5, vjust = -.6, fontface = "bold") +
  scale_y_continuous(labels = comma) +
  scale_fill_few() +
  theme(legend.position="none")
  }

## Graphs for distributions
graph.distribution <- function(dat, xaxis, xlabel){
ggplot(get(dat), aes(get(xaxis))) +
  geom_bar(fill = "light blue", color = "black") +
  xlab(xlabel) +
  ylab("Count") +
  theme_gdocs() +
  scale_x_continuous(breaks = seq(0, 10, 1))
  }

## Graphs for distributions with yaxis
graph.distribution.N <- function(dat, xaxis, yaxis, xlabel, plabel){
ggplot(get(dat), aes(get(xaxis), get(yaxis), label = get(plabel))) +
  geom_bar(stat = 'identity', fill = "light blue", color = "black") +
  xlab(xlabel) +
  ylab("Count") +
  theme_gdocs() +
  scale_x_continuous(breaks = seq(0, 10, 1)) +
  geom_text(size = 3.5, vjust = -.4)
}

## Bar plot for distributions
graph.boxplot <- function(dat, yaxis){
  ggplot(get(dat), aes(GROUPBY, get(yaxis), group = GROUPBY, fill = GROUPBY)) +
  geom_boxplot(outlier.shape = NA ) +
  ylab("Count") +
  xlab("Groups") +
  theme_gdocs() +
  scale_fill_few() +
  theme(legend.position="none")
}

#Graph for usage distribution
graph.function.usage.content.AB <- function(feature){

fest <- vegas[CONTENT == feature][, .(GROUPBY, UID, CONTENT)]
fest <- fest[, .N, by = .(GROUPBY, UID)]

ggplot(fest, aes(GROUPBY, N, fill = GROUPBY)) +
  geom_boxplot() +
  geom_jitter(width = .3, height = .2) +
  theme_gdocs() +
  xlab("") +
  ylab("") +
scale_fill_few() +
  theme(legend.position = "none")

}

######
graph.function.usage.content.AB.ONE <- function(feature){

fest <- vegas[CONTENT == feature][, .(UID, CONTENT)]
fest <- fest[, .N, by = .(UID)]

ggplot(fest, aes(x = feature, N, fill = feature)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .3, height = .2) +
  theme_gdocs() +
  xlab("") +
  ylab("") +
  scale_fill_few() +
  theme(legend.position = "none")
}


```


```{r Median spins, message = FALSE, warning = FALSE}
# Spins for all - first day (day 0)
rf.spins <- vegas[SUBCONTENT == "SPIN", .N, by = .(UID, GROUPBY)]
setnames(rf.spins, "N", "SPINS")

cuts.spins = c(0, 100, 250, 500, 1000, 2500, 5000, 10000, 50000)
labels.spins = c("0-99", "100-249", "250-499", "500-999", "1,000-2,499", "2,500-4,999", "5,000-9,999", "10,000-50,000")

invisible(rf.spins[, SPIN.RANGES := as.character(cut(SPINS, breaks = cuts.spins, labels = labels.spins, right = FALSE))])

rf.spins.median <- vegas[SUBCONTENT == "SPIN", .N, by = .(UID, GROUPBY)]
```

```{r Level first day}
rf.level <- vegas[CONTENT == "LEVELUP", .SD[.N], by = UID][, .(UID, ID)]
setnames(rf.level, "ID", "LEVEL")
rf.level$LEVEL <- as.integer(rf.level$LEVEL)

cuts.levels = c(0, 5, 10, 15, 20, 50, 100)
labels.levels = c("0-4", "5-9", "10-14", "15-19", "20-49", "50-100")
labels.levels2 = c("0", "0-4", "5-9", "10-14", "15-19", "20-49", "50-100")

invisible(rf.level[, LEVEL.RANGES := as.character(cut(LEVEL, breaks = cuts.levels, labels = labels.levels, right = FALSE, dig.lab = 0))])

rf.levelranges.median <-  vegas[CONTENT == "LEVELUP", .(UID, GROUPBY, ID)]
rf.levelranges.median$ID <- as.integer(rf.levelranges.median$ID)
rf.levelranges.median <- rf.levelranges.median[order(UID, -ID)]
rf.levelranges.median <- rf.levelranges.median[, .SD[1], by = .(UID, GROUPBY)]
setnames(rf.levelranges.median, "ID", "N")
```

```{r}
# COLLECTCOUNT
rf.collecthourly <- vegas[CONTENT == "COLLECT", .N, by = UID]
setnames(rf.collecthourly, "N", "COLLECTHRLY")

cuts.collecthourly = c(0, 2, 5, 10, 25, 50, 100, 500)
labels.collecthourly = c("0-1", "2-4", "5-9", "10-24", "25-49","50-99", "100-500")
labels.collecthourly2 = c("0", "0-1", "2-4", "5-9", "10-24", "25-49","50-99", "100-500")

invisible(rf.collecthourly[, COLLECT.RANGES := as.character(cut(COLLECTHRLY, breaks = cuts.collecthourly, labels = labels.collecthourly, right = FALSE))])

rf.collecthourly.median <- vegas[CONTENT == "COLLECT", .N, by = .(UID, GROUPBY)]
```

```{r}
rf.gold <- vegas[, .SD[.N], by = .(UID)][, .(UID, CNT_CURRENT)]

cuts.gold = c(0, 50000, 100000, 250000, 500000, 1000000, 10000000, 100000000)
labels.gold = c("0-49,999", "50,000-99,999", "100,000-249,999", "250,000-499,999", "500,000-999,999", 
                  "1,000,000-9,999,999", "10,000,000-100,000,000")
labels.gold2 = c("0", "0-49,999", "50,000-99,999", "100,000-249,999", "250,000-499,999", "500,000-999,999", 
                "1,000,000-9,999,999", "10,000,000-100,000,000")
invisible(rf.gold[, GOLD.RANGES := as.character(cut(CNT_CURRENT, breaks = cuts.gold, labels = labels.gold, right = FALSE))])

rf.gold.median <-  vegas[, .(UID, GROUPBY, CNT_CURRENT)]
rf.gold.median <- rf.gold.median[, .SD[.N], by = .(UID, GROUPBY)]
setnames(rf.gold.median, "CNT_CURRENT", "N")
```




```{r Slot info}
# First slot entered
rf.firstslot <- vegas[SUBCONTENT == "SPIN", .SD[1], by = UID][, .(UID, ID)]
setnames(rf.firstslot, "ID", "FIRSTSLOT")

# Last slot entered
rf.lastslot <- vegas[SUBCONTENT == "SPIN", .SD[.N], by = UID][, .(UID, ID)]
setnames(rf.lastslot, "ID", "LASTSLOT")

# Slots played 
rf.slotenters <- vegas[SUBCONTENT == "SPIN", lapply(.SD, uniqueN), by = .(UID, CREATE_ACCOUNT, CREATE_DATE)][,.(UID, ID)]
setnames(rf.slotenters, "ID", "SLOTS_ENTERED")

# Slot most played
rf.slotmostplayed <- vegas[SUBCONTENT == "SPIN", .(UID, SUBCONTENT, ID)]
rf.slotmostplayed <- rf.slotmostplayed[, .N, by = ID]

setnames(rf.slotmostplayed, "ID", "MOSTPLAYEDSLOT")

# Most popular slot
rf.popularslot <- vegas[SUBCONTENT == "SPIN", .N, by = .(UID, ID)]
rf.popularslot <- rf.popularslot[order(UID, -N)]
rf.popularslot <- rf.popularslot[, .SD[1], by = UID][, N := NULL]
setnames(rf.popularslot, "ID", "MOSTPOPULAR")


```


```{r}
# EVENTS
rf.events <- vegas[, .(UID, CONTENT, SUBCONTENT)]
rf.events$SUBCONTENT[is.na(rf.events$SUBCONTENT)] <- "UNKNOWN"

invisible(rf.events[, ':=' (NEWPLAYERBONUS = ifelse(CONTENT == "EVENT", 1, 0), 
                  CHEERUP = ifelse(CONTENT == "CHEERUP", 1, 0), 
                  DOUBLEUP = ifelse(SUBCONTENT == "DOUBLEUP", 1, 0), 
                  SHARE = ifelse(CONTENT == "SHARE", 1, 0), 
                  IAP = ifelse(CONTENT == "IAP", 1, 0)
                  )])

rf.events <- rf.events[NEWPLAYERBONUS == 1 | CHEERUP == 1 | DOUBLEUP == 1 | SHARE == 1 | IAP == 1]                   
rf.events <- unique(rf.events, by = c("UID", "NEWPLAYERBONUS", "CHEERUP", "DOUBLEUP", "SHARE", "IAP"))
invisible(rf.events[, c("CONTENT", "SUBCONTENT") := NULL])

rf.events <- rf.events[, lapply(.SD, sum), by = UID, .SDcols = 2:6]
```

```{r Retention cast, error = FALSE, message = FALSE}
retention <- rf.clean[,.(UID, GROUPBY, CREATE_ACCOUNT, CREATE_DATE, DIFF)]
retention <- unique(retention, by = c("UID", "CREATE_DATE", "DIFF"))
setnames(retention, "GROUPBY", "GROUP")

retention <- dcast(retention, UID  + CREATE_ACCOUNT + GROUP ~ DIFF, function(x) 1, fill = 0)
invisible(retention[, `0` := 1])
retention.integers <- retention
```

```{r Merge and 0s}
#Merging
allmerged <- Reduce(function(x, y) merge(x, y, by = "UID", all.x = TRUE), list(rf.spins, rf.level, rf.collecthourly, rf.firstslot, rf.lastslot,   
                                                                               rf.slotenters, rf.events, rf.gold, 
                                                                               rf.popularslot, retention))

allmerged[is.na(allmerged)] <- 0
```

```{r factorize }

allmerged.factored <- allmerged[, lapply(.SD, as.factor)]

allmerged.factored$SPIN.RANGES <- factor(allmerged.factored$SPIN.RANGES, levels = labels.spins)
allmerged.factored$LEVEL.RANGES <- factor(allmerged.factored$LEVEL.RANGES, levels = labels.levels2)
allmerged.factored$COLLECT.RANGES <- factor(allmerged.factored$COLLECT.RANGES, levels = labels.collecthourly2)
allmerged.factored$GOLD.RANGES <- factor(allmerged.factored$GOLD.RANGES, levels = labels.gold2)


```


```{r Graph function}
# Graph for 0/1 and A/B
# AB distribution
graph.function.AB <- function(predictor){
best <- allmerged.factored[, .N, by = c("GROUPBY", predictor)]
best[, PERCENT := paste0(100*round(N/sum(N),2), "%"), by = c("GROUPBY")]
  
  ggplot(best, aes_string(predictor, "N", fill = predictor, label = "PERCENT")) +
    geom_bar(stat = 'identity', position = "dodge", color = "black") +
    scale_fill_few() +
    theme_gdocs() + 
    theme(legend.position = "none") +
    xlab("") +
    ylab("") +
    geom_text(size = 3, vjust = 1.2, fontface = "bold") +
    #facet_grid(paste0(feature, "~", "GROUPBY"), scales = 'free')
    facet_grid(paste0("GROUPBY", "~", predictor), scales = 'free', space = 'free')
}

graph.function.AB.ONE <- function(predictor){
best <- allmerged.factored[, .N, by = c(predictor)]
best[, PERCENT := paste0(100*round(N/sum(N),2), "%")]
  
  ggplot(best, aes_string(predictor, "N", fill = predictor, label = "PERCENT")) +
    geom_bar(stat = 'identity', position = "dodge", color = "black") +
    scale_fill_few() +
    theme_gdocs() + 
    theme(legend.position = "none") +
    xlab("") +
    ylab("") +
    geom_text(size = 3, vjust = 1.2, fontface = "bold")
    #facet_grid(paste0(feature, "~", "GROUPBY"), scales = 'free')
}


graph.function.AB.retention <- function(predictor, feature){
test <- allmerged.factored[, .N, by = c("GROUPBY", predictor, feature)]
test[, TOTAL := 100*round(N/sum(N),2), by = c(feature, "GROUPBY")]
test[, PERCENT := paste0(TOTAL, "%")]
  
  ggplot(test, aes_string(predictor, "TOTAL", fill = predictor, label = "PERCENT")) +
    geom_bar(stat = 'identity', position = "dodge", color = "black") +
    scale_fill_few() +
    theme_gdocs() +  
    theme(legend.position = "none", axis.text.y = element_blank()) +
    xlab("") +
    ylab("") +
    geom_text(size = 3, vjust = 1.2, fontface = "bold") +
    #facet_grid(paste0(feature, "~", "GROUPBY"), scales = 'free')
    facet_grid(paste0("GROUPBY", "~", feature), scales = 'free', space = 'free')
}

graph.function.AB.retention.ONE <- function(predictor, feature){
test <- allmerged.factored[, .N, by = c(predictor, feature)]
test[, TOTAL := 100*round(N/sum(N),2), by = c(feature)]
test[, PERCENT := paste0(TOTAL, "%")]
  
  ggplot(test, aes_string(predictor, "TOTAL", fill = predictor, label = "PERCENT")) +
    geom_bar(stat = 'identity', position = "dodge", color = "black") +
    scale_fill_few() +
    theme_gdocs() +  
    theme(legend.position = "none") +
    xlab("") +
    ylab("") +
    geom_text(size = 3, vjust = 1.2, fontface = "bold") +
    facet_wrap(feature, scales = 'free')
}



# Graph for FEATURES = YES and A/B
graph.function.1.returns <- function(predictor, feature){
rest <- allmerged.factored[, .N, by = c("GROUPBY", predictor, feature)]
rest[, PERCENT := paste0(100*round(N/sum(N),2), "%"), by = c(feature, "GROUPBY")]

rest <- rest[get(feature) == 1]

  ggplot(rest, aes_string(predictor, "N", fill = predictor, label = "PERCENT")) +
    geom_bar(stat = 'identity', position = "dodge", color = "black") +
    scale_fill_few() +
    theme_gdocs() + 
    theme(legend.position = "none") +
    xlab("") +
    ylab("") +
    geom_text(size = 3, vjust = 1.2, fontface = "bold") +
    #facet_grid(paste0(feature, "~", "GROUPBY"), scales = 'free')
    facet_wrap(~GROUPBY, scales = 'free')
}

# Graph for median ranges (spins, levels)
graph.function.median <- function(dat){
  dat.median.one <- dat[, MEDIAN := as.integer(median(N)), by = GROUPBY]
  dat.median.one <- unique(dat.median.one, by = "GROUPBY")
  
ggplot(dat, aes(GROUPBY, N, fill = GROUPBY)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .3, height = .2, alpha = .4) +
  theme_gdocs() +
  xlab("") +
  ylab("") +
  scale_fill_few() +
  scale_y_continuous(labels = comma) +
  geom_text(data = dat.median.one, aes(GROUPBY, MEDIAN, label = MEDIAN, hjust = 5, size = 3.5)) +
  theme(legend.position = "none")     
}

#Graph for median ranges (spins, levels)
graph.function.median.ONE <- function(dat){
  dat.median.one <- dat[, MEDIAN := median(N)]
  dat.median.one <- unique(dat.median.one, by = "MEDIAN")


ggplot(dat, aes(x = "Feature", y = N, fill = "Feature")) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .3, height = .2, alpha = .4) +
  theme_gdocs() +
  xlab("") +
  ylab("") +
  scale_fill_few() +
  geom_text(data = dat.median.one, aes("Feature", N, label = MEDIAN), size = 3.5, hjust = 10) +
  scale_y_continuous(labels = comma) +
  theme(legend.position = "none")
}

```

> ### **`1` DAY RETENTION** 

***

```{r retention}
retention.graph <- retention.integers[, lapply(.SD, function(x) 100 * round(sum(x)/length(x),2)), by = GROUP, .SDcols = 5]
invisible(retention.graph[, PERCENT := paste0(`1`, "%")])

ggplot(retention.graph, aes(GROUP, `1`, fill = GROUP, label = PERCENT)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_few() +
  theme_gdocs() + 
  theme(legend.position = "none") +
  xlab("") +
  ylab("") +
  geom_text(size = 4, vjust = 1.6, fontface = "bold")

```

> ### **PROGRESSION**

***

#### **SPIN RANGES**
#### **스핀 범위**

```{r data checks}
#graph.function.AB.ONE
#graph.function.AB.retention("`1`", "SPIN.RANGES")
#graph.function.AB("SPIN.RANGES")
#graph.function.median(rf.spins.median)

graph.function.AB.ONE("SPIN.RANGES")
graph.function.AB.retention.ONE("`1`", "SPIN.RANGES")
graph.function.median.ONE(rf.spins.median)


```

#### **LEVEL RANGES**
#### **레벨 범위**
```{r}
#graph.function.AB("LEVEL.RANGES")
#graph.function.AB.retention("`1`", "LEVEL.RANGES")
#graph.function.median(rf.levelranges.median)

graph.function.AB.ONE("LEVEL.RANGES")
graph.function.AB.retention.ONE("`1`", "LEVEL.RANGES")
graph.function.median.ONE(rf.levelranges.median)


```

#### **GOLD RANGES**
#### **골드 범위**
```{r, warning=FALSE}
#graph.function.AB("GOLD.RANGES")
#graph.function.AB.retention("`1`", "GOLD.RANGES")
#####graph.function.median(rf.gold.median)

graph.function.AB.ONE("GOLD.RANGES")
graph.function.AB.retention.ONE("`1`", "GOLD.RANGES")
graph.function.median.ONE(rf.gold.median)


```


#### **COLLECT RANGES**
#### **COLLECT 범위**
```{r}
#graph.function.AB("COLLECT.RANGES")
#graph.function.AB.retention("`1`", "COLLECT.RANGES")
####graph.function.median(rf.collecthourly.median)

graph.function.AB.ONE("COLLECT.RANGES")
graph.function.AB.retention.ONE("`1`", "COLLECT.RANGES")
graph.function.median.ONE(rf.collecthourly.median)
```


> ### **SLOTS**
***

#### **FIRST SLOT**
#### **첫 슬롯 입장**
```{r}
#graph.function.AB("FIRSTSLOT")
#graph.function.AB.retention("`1`", "FIRSTSLOT")
graph.function.AB.ONE("FIRSTSLOT")
graph.function.AB.retention.ONE("`1`", "FIRSTSLOT")
```


#### **MOST POPULAR SLOT**
#### **인그 슬롯**
```{r}
#graph.function.AB("MOSTPOPULAR")
#graph.function.AB.retention("`1`", "MOSTPOPULAR")
graph.function.AB.ONE("MOSTPOPULAR")
graph.function.AB.retention.ONE("`1`", "MOSTPOPULAR")
```


#### **SLOTS ENTERED**
#### **슬롯 입장 개수**
```{r}
#graph.function.AB("SLOTS_ENTERED")
#graph.function.AB.retention("`1`", "SLOTS_ENTERED")
graph.function.AB.ONE("SLOTS_ENTERED")
graph.function.AB.retention.ONE("`1`", "SLOTS_ENTERED")
```

> ### **Features**
***

#### **NEW PLAYER BONUS**
#### **신규 유저 보너스 획득**
```{r}
#graph.function.AB("NEWPLAYERBONUS")
#graph.function.1.returns("`1`", "NEWPLAYERBONUS")
graph.function.AB.ONE("NEWPLAYERBONUS")
graph.function.AB.retention.ONE("`1`", "NEWPLAYERBONUS")

```

#### **CHEERUP**
```{r}
#graph.function.AB("CHEERUP")
#graph.function.1.returns("`1`", "CHEERUP")
#graph.function.usage.content.AB("CHEERUP")

graph.function.AB.ONE("CHEERUP")
graph.function.AB.retention.ONE("`1`", "CHEERUP")
graph.function.usage.content.AB.ONE("CHEERUP")


```

#### **DOUBLEUP**
```{r}
#graph.function.AB("DOUBLEUP")
#graph.function.1.returns("`1`", "DOUBLEUP")

# graph.function.usage.subcontent.AB <- function(feature){
# fest <- vegas[SUBCONTENT == feature][, .(GROUPBY, UID, SUBCONTENT)]
# fest <- fest[, .N, by = .(GROUPBY, UID)]
# 
# ggplot(fest, aes(GROUPBY, N, fill = GROUPBY)) +
#   geom_boxplot() +
#   geom_jitter(width = .3, height = .2) +
#   theme_gdocs() +
#   xlab("") +
#   ylab("") +
# scale_fill_few() +
#   theme(legend.position = "none")
# }
# 
# graph.function.usage.subcontent.AB("DOUBLEUP")

graph.function.AB.ONE("DOUBLEUP")
graph.function.AB.retention.ONE("`1`", "DOUBLEUP")


graph.function.usage.subcontent.AB.ONE <- function(feature){
fest <- vegas[SUBCONTENT == feature][, .(UID, SUBCONTENT)]
fest <- fest[, .N, by = .(UID)]

ggplot(fest, aes("FEATURE", N, fill = "FEATURE")) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .3, height = .2) +
  theme_gdocs() +
  xlab("") +
  ylab("") +
  scale_fill_few() +
  theme(legend.position = "none")
}

graph.function.usage.subcontent.AB.ONE("DOUBLEUP")

```

#### **FACEBOOK SHARE**
```{r}
#graph.function.AB("SHARE")
#graph.function.1.returns("`1`", "SHARE")
#graph.function.usage.content.AB("SHARE")

graph.function.AB.ONE("SHARE")
graph.function.AB.retention.ONE("`1`", "SHARE")
graph.function.usage.content.AB.ONE("SHARE")

```

> ### **ABANDONMENT**
*** 

#### **LEVEL**
#### **`1`날 접속하지 않은 유저의 레벨**
```{r}
abandoned.level <- allmerged[`1` == 0, .(UID, GROUPBY, LEVEL)]
abandoned.level <- unique(abandoned.level, by = "UID")

# ggplot(abandoned.level, aes(GROUPBY, LEVEL, fill = GROUPBY)) +
#   geom_boxplot() +
#   geom_jitter(width = .3, height = .2) +
#   theme_gdocs() +
#   xlab("") +
#   ylab("") +
#   scale_fill_few() +
#   theme(legend.position = "none")

ggplot(abandoned.level, aes("LEVEL", LEVEL, fill = "LEVEL")) +
  geom_boxplot() +
  geom_jitter(width = .3, height = .2) +
  theme_gdocs() +
  xlab("") +
  ylab("") +
  scale_fill_few() +
  theme(legend.position = "none")


```

#### **LAST SLOT**
#### **`1`날 접속하지 않은 유저의 마지막 슬롯**
```{r}
abandoned.lastslot <- allmerged[`1` == 0, .(UID, LASTSLOT)]
abandoned.lastslot <- abandoned.lastslot[, .N, by = .(LASTSLOT)]
invisible(abandoned.lastslot[, PERCENT := paste0(100*round(N/sum(N),2), "%")])

ggplot(abandoned.lastslot, aes(LASTSLOT, N, fill = LASTSLOT, label = PERCENT)) +
  geom_bar(stat = "identity", color = "black") +
  theme_gdocs() +
  xlab("") +
  ylab("") +
  scale_fill_few() +
  geom_text(size = 3.5, vjust = 1.2, fontface = "bold") +
  theme(legend.position = "none")
```



 
