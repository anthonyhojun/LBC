---
title: "Day 1 returns"
output: html_document
---

*** 

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(scales)
library(tidyr)
library(gridExtra)
library(readr)
library(stringr)
library(randomForest)
library(Boruta)
library(randomForest)
#library(fasttime)
library(data.table)
#library(anytime)
library(Hmisc)

```


```{r pressure, echo=FALSE, message = FALSE, warning = FALSE}
### Randomforest with retention 

# Load
# Create directory
sysdate <- format(Sys.Date(), "%Y%m%d")
querydirectory <- file.path("C:/Users/antpc/Desktop/Vegas/Analytics/Query", sysdate)

# Load files
rf <- list.files(querydirectory, full.names = TRUE)
rf.bind <- data.table(rbindlist(lapply(rf, read_csv)))

# Start

### 1 day retention
# Default Filters
rf.base <- rf.bind[COUNTRY != "KR" & APP == "VEGAS" & TYPE == "GOLD"][order(UID, CREATE_DATE)]
invisible(rf.base[, c("MAX_LEVEL", "LOGIN_DATE", "EMAIL", "COUNTRY", "AGE_RANGE", "FRIENDS_COUNT", "TYPE", "APP") := NULL])

# Create date and provider filters
rf.clean <- rf.base[CREATE_ACCOUNT >= "2016-10-26" & UID > 6200]

invisible(rf.clean[, CREATE_ACCOUNT := substr(CREATE_ACCOUNT, 1, 10)])
invisible(rf.clean[, CREATE_DATE := substr(CREATE_DATE, 1, 10)])

invisible(rf.clean[, DIFF := as.integer(difftime(CREATE_DATE, CREATE_ACCOUNT, units = "days"))])

# Pick retention day FOR FINDING DAY 3 RETENTION SET TO <= 2
rf.filtered.retention <- rf.clean
rf.filtered <- rf.clean[DIFF == 0] # [DIFF == 0] SHOULD BE -1 day of what i want to check

# Facebook info
rf.facebook.info <- rf.filtered[, .(UID, GENDER, PROVIDER)]
rf.facebook.info <- unique(rf.facebook.info, by = "UID")

# Spins for all - first day (day 0)
rf.spins <- rf.filtered[SUBCONTENT == "SPIN", .N, by = UID]
setnames(rf.spins, "N", "SPINS")

cuts.spins = c(0, 100, 250, 500, 1000, 2500, 5000, 10000, 50000)
labels.spins = c("0-99", "100-249", "250-499", "500-999", "1,000-2,499", "2,500-4,999", "5,000-9,999", "10,000-50,000")

invisible(rf.spins[, SPIN.RANGES := as.character(cut(SPINS, breaks = cuts.spins, labels = labels.spins, right = FALSE))])

# Win count ##ADD RANGES
rf.wincount <- rf.filtered[SUBCONTENT == "WIN", .N, by = UID]
setnames(rf.wincount, "N", "WIN_COUNT")

cuts.wincount = c(0, 100, 250, 500, 1000, 2500, 5000, 10000, 50000)
labels.wincount = c("0-99", "100-249", "250-499", "500-999", "1,000-2,499", "2,500-4,999", "5,000-9,999", "10,000-50,000")
labels.wincount2 = c("0", "0-99", "100-249", "250-499", "500-999", "1,000-2,499", "2,500-4,999", "5,000-9,999", "10,000-50,000")


invisible(rf.wincount[, WINCOUNT.RANGES := as.character(cut(WIN_COUNT, breaks = cuts.wincount, labels = labels.wincount, right = FALSE))])

# Win amount
rf.winamount <- rf.filtered[SUBCONTENT == "WIN"]
rf.winamount <- rf.winamount[, abs(sum(CNT_USE)), by = UID]
setnames(rf.winamount, "V1", "WIN_SUM")


cuts.winamount = c(0, 50000, 100000, 250000, 500000, 1000000, 10000000, 100000000)
labels.winamount = c("0-49,999", "50,000-99,999", "100,000-249,999", "250,000-499,999", "500,000-999,999", 
                "1,000,000-9,999,999", "10,000,000-100,000,000")
labels.winamount2 = c("0", "0-49,999", "50,000-99,999", "100,000-249,999", "250,000-499,999", "500,000-999,999", 
                 "1,000,000-9,999,999", "10,000,000-100,000,000")
invisible(rf.winamount[, WINAMOUNT.RANGES := as.character(cut(WIN_SUM, breaks = cuts.winamount, labels = labels.winamount, right = FALSE))])



# First slot entered
rf.firstslot <- rf.filtered[SUBCONTENT == "SPIN", .SD[1], by = UID][, .(UID, ID)]
setnames(rf.firstslot, "ID", "FIRSTSLOT")

# Last slot entered
rf.lastslot <- rf.filtered[SUBCONTENT == "SPIN", .SD[.N], by = UID][, .(UID, ID)]
setnames(rf.lastslot, "ID", "LASTSLOT")

# Slot enters first day
rf.slotenters <- rf.filtered[SUBCONTENT == "SPIN", lapply(.SD, uniqueN), by = .(UID, CREATE_ACCOUNT, CREATE_DATE)][,.(UID, ID)]
setnames(rf.slotenters, "ID", "SLOTS_ENTERED")

# Slot most played
rf.slotmostplayed <- rf.filtered[SUBCONTENT == "SPIN", .N, by = .(UID, SUBCONTENT, ID)]
rf.slotmostplayed <- rf.slotmostplayed[order(UID, -N)]
rf.slotmostplayed <- rf.slotmostplayed[, .SD[1], by = UID][,.(UID, ID)]
setnames(rf.slotmostplayed, "ID", "MOSTPLAYEDSLOT")

# Level first day 
rf.level <- rf.filtered[CONTENT == "LEVELUP", .SD[.N], by = UID][, .(UID, ID)]
setnames(rf.level, "ID", "LEVEL")
rf.level$LEVEL <- as.integer(rf.level$LEVEL)

cuts.levels = c(0, 5, 10, 15, 20, 50, 100)
labels.levels = c("0-4", "5-9", "10-14", "15-19", "20-49", "50-100")
labels.levels2 = c("0", "0-4", "5-9", "10-14", "15-19", "20-49", "50-100")

invisible(rf.level[, LEVEL.RANGES := as.character(cut(LEVEL, breaks = cuts.levels, labels = labels.levels, right = FALSE, dig.lab = 0))])


# End of gold first day 
rf.gold <- rf.filtered[, .SD[.N], by = .(UID)][, .(UID, CNT_CURRENT)]

cuts.gold = c(0, 50000, 100000, 250000, 500000, 1000000, 10000000, 100000000)
labels.gold = c("0-49,999", "50,000-99,999", "100,000-249,999", "250,000-499,999", "500,000-999,999", 
                  "1,000,000-9,999,999", "10,000,000-100,000,000")
labels.gold2 = c("0", "0-49,999", "50,000-99,999", "100,000-249,999", "250,000-499,999", "500,000-999,999", 
                "1,000,000-9,999,999", "10,000,000-100,000,000")
invisible(rf.gold[, GOLD.RANGES := as.character(cut(CNT_CURRENT, breaks = cuts.gold, labels = labels.gold, right = FALSE))])


# CHEERUP
rf.cheerup <- rf.filtered[CONTENT == "CHEERUP", .(unique(UID))]
invisible(rf.cheerup[, CHEERUP := 1])
setnames(rf.cheerup, "V1", "UID")

# COLLECTCOUNT
rf.collecthourly <- rf.filtered[CONTENT == "COLLECT", .N, by = UID]
setnames(rf.collecthourly, "N", "COLLECTHRLY")

cuts.collecthourly = c(0, 2, 5, 10, 25, 50, 100, 500)
labels.collecthourly = c("0-1", "2-4", "5-9", "10-24", "25-49","50-99", "100-500")
labels.collecthourly2 = c("0", "0-1", "2-4", "5-9", "10-24", "25-49","50-99", "100-500")

invisible(rf.collecthourly[, COLLECT.RANGES := as.character(cut(COLLECTHRLY, breaks = cuts.collecthourly, labels = labels.collecthourly, right = FALSE))])

# DOUBLEUP (SUBCONTENT)
rf.doubleup <- rf.filtered[SUBCONTENT == "DOUBLEUP", .(unique(UID))]
invisible(rf.doubleup[, DOUBLEUP := 1])
setnames(rf.doubleup, "V1", "UID")

# FACEBOOK SHARE
rf.facebook.share <- rf.filtered[CONTENT == "SHARE", .(unique(UID))]
invisible(rf.facebook.share[, SHARE := 1])
setnames(rf.facebook.share, "V1", "UID")

# SPREAD DATE
rf.filtered.retention1 <- rf.filtered.retention[, .SD[1], by = .(UID, CREATE_DATE)][,.(UID, CREATE_ACCOUNT, CREATE_DATE, DIFF)]
rf.filtered.retention1 <- dcast(rf.filtered.retention1, UID ~ DIFF, function(x) 1, fill = 0)

###### MERGE
allmerged <- Reduce(function(x, y) merge(x, y, by = "UID", all.x = TRUE), list(rf.spins, rf.firstslot, rf.lastslot, rf.slotenters, 
                                                                               rf.level, rf.gold, rf.cheerup, rf.doubleup, rf.facebook.share, 
                                                                               rf.collecthourly, rf.filtered.retention1, rf.facebook.info, 
                                                                               rf.slotmostplayed, rf.winamount, rf.wincount))

##### PREP FOR RF
allmerged[is.na(allmerged)] <- 0


### RANDOM FOREST
allmerged.factors <- allmerged[, lapply(.SD, as.factor)]

### Make cuts into ordered factors
allmerged.factors$SPIN.RANGES <- factor(allmerged$SPIN.RANGES, levels = labels.spins)
allmerged.factors$GOLD.RANGES <- factor(allmerged$GOLD.RANGES, levels = labels.gold2)
allmerged.factors$LEVEL.RANGES <- factor(allmerged$LEVEL.RANGES, levels = labels.levels2)
allmerged.factors$WINAMOUNT.RANGES <- factor(allmerged$WINAMOUNT.RANGES, levels = labels.winamount2)
allmerged.factors$WINCOUNT.RANGES <- factor(allmerged$WINCOUNT.RANGES, levels = labels.wincount2)
allmerged.factors$COLLECT.RANGES <- factor(allmerged$COLLECT.RANGES, levels = labels.collecthourly2)


## Check for NAs
# lapply(allmerged.factors, function(x) sum(is.na(x)))
# allmerged.factors[is.na(GOLD.RANGES)]

### Function
rf.funct <- function(dat, predictor, feature){
  dat <- dat[, .N, c(predictor, feature)] 
  invisible(dat[, PERCENT := paste0(100*round(N/sum(N),2), "%"), by = c(feature)])
  
  ggplot(dat, aes_string(predictor, "N", fill = predictor, label = "PERCENT")) +
    geom_bar(stat = 'identity', position = "dodge", color = "black") +
    scale_fill_few() +
    theme(legend.position = "none") +
    xlab("") +
    ylab("") +
    geom_text(size = 3, vjust = 0) +
    facet_wrap(feature, scales = 'free')
}
```


```{r, echo = FALSE, message = FALSE}
B2 <- Boruta(`1` ~ SPIN.RANGES + SLOTS_ENTERED + 
               LEVEL.RANGES + GOLD.RANGES +
               WINAMOUNT.RANGES + WINCOUNT.RANGES + FIRSTSLOT + LASTSLOT + COLLECT.RANGES +
               CHEERUP + DOUBLEUP + SHARE + GENDER + PROVIDER + MOSTPLAYEDSLOT, allmerged.factors)
```


## Boruta Importance
```{r, echo = FALSE}
plot(B2, cex.axis = .6, las = 2)
```


### Spin Ranges 
```{r, echo = FALSE}
rf.funct(allmerged.factors, "`1`", "SPIN.RANGES")
```

### Level ranges
```{r, echo = FALSE}
rf.funct(allmerged.factors, "`1`", "LEVEL.RANGES")
```

### Gold ranges
```{r, echo = FALSE}
rf.funct(allmerged.factors, "`1`", "GOLD.RANGES")
```

### Win count ranges
```{r, echo = FALSE}
rf.funct(allmerged.factors, "`1`", "WINCOUNT.RANGES")
```

### Win amount ranges
```{r, echo = FALSE}
rf.funct(allmerged.factors, "`1`", "WINAMOUNT.RANGES")
```

### Collects
```{r, echo = FALSE}
rf.funct(allmerged.factors, "`1`", "COLLECT.RANGES")
```

### Slots played
```{r, echo = FALSE}
rf.funct(allmerged.factors, "`1`", "SLOTS_ENTERED")
```



